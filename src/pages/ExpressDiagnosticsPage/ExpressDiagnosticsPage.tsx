import { useState, useRef, useEffect } from 'react';
import { Container } from '@/widgets/Container';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '@/shared/ui/button';
import { Card, CardContent } from '@/shared/ui/card';
import confetti from 'canvas-confetti';

// –¢–∏–ø—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –≤–æ–ø—Ä–æ—Å–æ–≤
interface Specialty {
  id: number;
  title: string;
  description: string;
  icon: string;
  color: string;
}

interface Question {
  id: number;
  text: string;
  options: {
    id: number;
    text: string;
    score: number;
  }[];
}

interface TestResult {
  minScore: number;
  maxScore: number;
  title: string;
  description: string;
}

// –î–∞–Ω–Ω—ã–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö
const specialties: Specialty[] = [
  {
    id: 1,
    title: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
    description: '–û—Ü–µ–Ω–∫–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è',
    icon: 'üé®',
    color: 'bg-pink-500',
  },
  {
    id: 2,
    title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
    description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–º –Ω–∞—É–∫–∞–º',
    icon: '‚öôÔ∏è',
    color: 'bg-blue-500',
  },
  {
    id: 3,
    title: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
    description: '–û—Ü–µ–Ω–∫–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ —ç–º–ø–∞—Ç–∏–∏',
    icon: 'üë•',
    color: 'bg-green-500',
  },
  {
    id: 4,
    title: '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
    description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∫ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é',
    icon: 'üß†',
    color: 'bg-purple-500',
  },
  {
    id: 5,
    title: '–õ–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
    description: '–û—Ü–µ–Ω–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∏ –ª–∏–¥–µ—Ä—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞',
    icon: 'üëë',
    color: 'bg-yellow-500',
  },
  {
    id: 6,
    title: '–Ø–∑—ã–∫–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
    description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é —è–∑—ã–∫–æ–≤ –∏ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–µ',
    icon: 'üó£Ô∏è',
    color: 'bg-red-500',
  },
  {
    id: 7,
    title: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã',
    description: '–û—Ü–µ–Ω–∫–∞ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—Ö–∞ –∏ —á—É–≤—Å—Ç–≤–∞ —Ä–∏—Ç–º–∞',
    icon: 'üéµ',
    color: 'bg-indigo-500',
  },
  {
    id: 8,
    title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏',
    description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏',
    icon: '‚öΩ',
    color: 'bg-orange-500',
  },
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π)
const getQuestions = (specialtyId: number): Question[] => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
  return [
    {
      id: 1,
      text: '–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏?',
      options: [
        { id: 1, text: '–°–æ–≤—Å–µ–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', score: 0 },
        { id: 2, text: '–°–∫–æ—Ä–µ–µ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', score: 1 },
        { id: 3, text: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', score: 2 },
        { id: 4, text: '–°–∫–æ—Ä–µ–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', score: 3 },
        { id: 5, text: '–û—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è', score: 4 },
      ],
    },
    {
      id: 2,
      text: '–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç—å—é?',
      options: [
        { id: 1, text: '–ù–∏–∫–æ–≥–¥–∞', score: 0 },
        { id: 2, text: '–û—á–µ–Ω—å —Ä–µ–¥–∫–æ', score: 1 },
        { id: 3, text: '–ò–Ω–æ–≥–¥–∞', score: 2 },
        { id: 4, text: '–ß–∞—Å—Ç–æ', score: 3 },
        { id: 5, text: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ', score: 4 },
      ],
    },
    {
      id: 3,
      text: '–ù–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –≤–∞–º –¥–∞—é—Ç—Å—è –∑–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ?',
      options: [
        { id: 1, text: '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ', score: 0 },
        { id: 2, text: '–°–∫–æ—Ä–µ–µ —Å–ª–æ–∂–Ω–æ', score: 1 },
        { id: 3, text: '–°—Ä–µ–¥–Ω–µ', score: 2 },
        { id: 4, text: '–°–∫–æ—Ä–µ–µ –ª–µ–≥–∫–æ', score: 3 },
        { id: 5, text: '–û—á–µ–Ω—å –ª–µ–≥–∫–æ', score: 4 },
      ],
    },
    {
      id: 4,
      text: '–ü–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ –≤—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏?',
      options: [
        { id: 1, text: '–°–æ–≤—Å–µ–º –Ω–µ—Ç', score: 0 },
        { id: 2, text: '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç', score: 1 },
        { id: 3, text: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ', score: 2 },
        { id: 4, text: '–°–∫–æ—Ä–µ–µ –¥–∞', score: 3 },
        { id: 5, text: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞', score: 4 },
      ],
    },
    {
      id: 5,
      text: '–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ –±—É–¥—É—â–µ–º?',
      options: [
        { id: 1, text: '–¢–æ—á–Ω–æ –Ω–µ—Ç', score: 0 },
        { id: 2, text: '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç', score: 1 },
        { id: 3, text: '–í–æ–∑–º–æ–∂–Ω–æ', score: 2 },
        { id: 4, text: '–°–∫–æ—Ä–µ–µ –¥–∞', score: 3 },
        { id: 5, text: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –¥–∞', score: 4 },
      ],
    },
  ];
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
const testResults: TestResult[] = [
  {
    minScore: 0,
    maxScore: 5,
    title: '–ù–∏–∑–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
    description: '–í –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∏ —Ç–∞–ª–∞–Ω—Ç—ã –ª–µ–∂–∞—Ç –≤ –¥—Ä—É–≥–æ–π —Å—Ñ–µ—Ä–µ.',
  },
  {
    minScore: 6,
    maxScore: 10,
    title: '–°—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
    description: '–£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—Ç–∫–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–∏—Ç—å —ç—Ç–∏ –Ω–∞–≤—ã–∫–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.',
  },
  {
    minScore: 11,
    maxScore: 15,
    title: '–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
    description: '–í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —Ö–æ—Ä–æ—à–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç—Ç–∏—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤.',
  },
  {
    minScore: 16,
    maxScore: 20,
    title: '–í—ã–¥–∞—é—â–∏–π—Å—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
    description: '–£ –≤–∞—Å –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã–¥–∞—é—â–∏–µ—Å—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è —Ä–∞–∑–≤–∏—Ç–∏–µ–º —ç—Ç–æ–≥–æ —Ç–∞–ª–∞–Ω—Ç–∞.',
  },
];

export const ExpressDiagnosticsPage = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [isSpinning, setIsSpinning] = useState(false);
  const [selectedSpecialty, setSelectedSpecialty] = useState<Specialty | null>(null);
  const [visibleSpecialtyIndex, setVisibleSpecialtyIndex] = useState(0);
  const [spinSpeed, setSpinSpeed] = useState(100);
  const [showTest, setShowTest] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<{[key: number]: number}>({});
  const [showResults, setShowResults] = useState(false);
  const [totalScore, setTotalScore] = useState(0);
  
  const spinTimerRef = useRef<NodeJS.Timeout | null>(null);
  const spinCountRef = useRef(0);
  const maxSpinCount = useRef(Math.floor(Math.random() * 20) + 30); // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–∫
  
  // –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏
  const startSpin = () => {
    if (isSpinning) return;
    
    setIsSpinning(true);
    setShowTest(false);
    setShowResults(false);
    setAnswers({});
    setCurrentQuestionIndex(0);
    setTotalScore(0);
    spinCountRef.current = 0;
    maxSpinCount.current = Math.floor(Math.random() * 20) + 30;
    setSpinSpeed(100);
    
    const spin = () => {
      setVisibleSpecialtyIndex((prev) => (prev + 1) % specialties.length);
      spinCountRef.current += 1;
      
      // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–¥–ª—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
      if (spinCountRef.current > maxSpinCount.current * 0.7) {
        setSpinSpeed((prev) => Math.min(prev + 20, 500));
      }
      
      if (spinCountRef.current < maxSpinCount.current) {
        spinTimerRef.current = setTimeout(spin, spinSpeed);
      } else {
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É–ª–µ—Ç–∫–∏
        setIsSpinning(false);
        setSelectedSpecialty(specialties[visibleSpecialtyIndex]);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        confetti({
          particleCount: 100,
          spread: 70,
          origin: { y: 0.6 }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          setShowTest(true);
        }, 1000);
      }
    };
    
    spinTimerRef.current = setTimeout(spin, spinSpeed);
  };
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (spinTimerRef.current) {
        clearTimeout(spinTimerRef.current);
      }
    };
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  const handleAnswer = (questionId: number, score: number) => {
    const newAnswers = { ...answers, [questionId]: score };
    setAnswers(newAnswers);
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (currentQuestionIndex < getQuestions(selectedSpecialty?.id || 0).length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
      const total = Object.values(newAnswers).reduce((sum, score) => sum + score, 0);
      setTotalScore(total);
      setShowResults(true);
    }
  };
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
  const getTestResult = () => {
    return testResults.find(
      result => totalScore >= result.minScore && totalScore <= result.maxScore
    );
  };
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
  const restartTest = () => {
    setSelectedSpecialty(null);
    setShowTest(false);
    setShowResults(false);
    setAnswers({});
    setCurrentQuestionIndex(0);
    setTotalScore(0);
  };
  
  return (
    <Container>
      <section className="py-12">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl font-bold mb-6 bg-gradient-to-r from-primary to-primary/70 bg-clip-text">
            –≠–∫—Å–ø—Ä–µ—Å—Å-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤
          </h1>
          <div className="w-24 h-1 bg-primary mx-auto rounded-full mb-8"></div>
          <p className="text-xl max-w-3xl mx-auto leading-relaxed">
            –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ —Ä—É–ª–µ—Ç–∫—É, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.
            –ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ!
          </p>
        </motion.div>
        
        {!showTest && !selectedSpecialty && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="max-w-3xl mx-auto mb-12"
          >
            <div className="relative">
              {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - —É–∫–∞–∑–∞—Ç–µ–ª—å */}
              <div className="absolute left-1/2 transform -translate-x-1/2 -top-6 w-0 h-0 border-l-[20px] border-r-[20px] border-t-[30px] border-l-transparent border-r-transparent border-t-primary z-10"></div>
              
              {/* –†—É–ª–µ—Ç–∫–∞ */}
              <div className="relative h-80 overflow-hidden rounded-xl border-4 border-primary shadow-xl bg-gradient-to-b from-gray-50 to-gray-100">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={visibleSpecialtyIndex}
                    initial={{ y: 100, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    exit={{ y: -100, opacity: 0 }}
                    transition={{ duration: 0.2 }}
                    className="absolute inset-0 flex items-center justify-center"
                  >
                    <Card className={`w-4/5 h-3/5 ${specialties[visibleSpecialtyIndex].color} text-white`}>
                      <CardContent className="flex flex-col items-center justify-center h-full p-6 text-center">
                        <div className="text-6xl mb-4">{specialties[visibleSpecialtyIndex].icon}</div>
                        <h3 className="text-2xl font-bold mb-2">{specialties[visibleSpecialtyIndex].title}</h3>
                        <p>{specialties[visibleSpecialtyIndex].description}</p>
                      </CardContent>
                    </Card>
                  </motion.div>
                </AnimatePresence>
              </div>
            </div>
            
            <div className="flex justify-center mt-8">
              <Button 
                size="large" 
                className="px-8 py-6 rounded-full text-lg font-bold"
                onClick={startSpin}
                disabled={isSpinning}
              >
                {isSpinning ? '–í—Ä–∞—â–∞–µ—Ç—Å—è...' : '–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É!'}
              </Button>
            </div>
          </motion.div>
        )}
        
        {selectedSpecialty && !showTest && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6 }}
            className="max-w-xl mx-auto text-center"
          >
            <Card className={`${selectedSpecialty.color} text-white mb-8`}>
              <CardContent className="p-8">
                <div className="text-7xl mb-4">{selectedSpecialty.icon}</div>
                <h2 className="text-3xl font-bold mb-4">{selectedSpecialty.title}</h2>
                <p className="text-xl">{selectedSpecialty.description}</p>
              </CardContent>
            </Card>
            <p className="text-lg mb-6">–¢–µ—Å—Ç —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è...</p>
          </motion.div>
        )}
        
        {showTest && selectedSpecialty && !showResults && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4 }}
            className="max-w-2xl mx-auto"
          >
            <Card className="mb-8">
              <CardContent className="p-8">
                <div className="flex items-center mb-6">
                  <div className={`w-12 h-12 rounded-full ${selectedSpecialty.color} text-white flex items-center justify-center text-2xl mr-4`}>
                    {selectedSpecialty.icon}
                  </div>
                  <h2 className="text-2xl font-bold">{selectedSpecialty.title}</h2>
                </div>
                
                <div className="mb-6">
                  <div className="flex justify-between text-sm mb-2">
                    <span>–í–æ–ø—Ä–æ—Å {currentQuestionIndex + 1} –∏–∑ {getQuestions(selectedSpecialty.id).length}</span>
                    <span>{Math.round(((currentQuestionIndex + 1) / getQuestions(selectedSpecialty.id).length) * 100)}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-primary h-2 rounded-full" 
                      style={{ width: `${((currentQuestionIndex + 1) / getQuestions(selectedSpecialty.id).length) * 100}%` }}
                    ></div>
                  </div>
                </div>
                
                <h3 className="text-xl font-medium mb-6">
                  {getQuestions(selectedSpecialty.id)[currentQuestionIndex].text}
                </h3>
                
                <div className="space-y-3">
                  {getQuestions(selectedSpecialty.id)[currentQuestionIndex].options.map((option) => (
                    <Button
                      key={option.id}
                      variant={answers[getQuestions(selectedSpecialty.id)[currentQuestionIndex].id] === option.score ? "default" : "outline"}
                      className="w-full justify-start text-left py-4 h-auto"
                      onClick={() => handleAnswer(getQuestions(selectedSpecialty.id)[currentQuestionIndex].id, option.score)}
                    >
                      {option.text}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
        
        {showResults && selectedSpecialty && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4 }}
            className="max-w-2xl mx-auto"
          >
            <Card className="mb-8 overflow-hidden">
              <div className={`${selectedSpecialty.color} text-white p-8 text-center`}>
                <div className="text-7xl mb-4">{selectedSpecialty.icon}</div>
                <h2 className="text-3xl font-bold mb-2">{selectedSpecialty.title}</h2>
                <p className="text-xl">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {totalScore} –∏–∑ {getQuestions(selectedSpecialty.id).length * 4} –±–∞–ª–ª–æ–≤</p>
              </div>
              
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold mb-4">{getTestResult()?.title}</h3>
                <p className="text-lg mb-6">{getTestResult()?.description}</p>
                
                <div className="border p-6 rounded-lg mb-6">
                  <h4 className="font-bold mb-3">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4>
                  <p>
                    {totalScore <= 10 
                      ? '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö.' 
                      : '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.'}
                  </p>
                </div>
                
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Button onClick={restartTest} variant="outline">
                    –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞
                  </Button>
                  <Button>
                    –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                  </Button>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        )}
      </section>
    </Container>
  );
};